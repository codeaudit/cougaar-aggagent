Unary Predicates:

--[SILK]--

(begin
  (import "org.cougaar.lib.aggagent.test.NumberCycle")
  (lambda (obj)
    (.isInstance NumberCycle.class obj)))

--[JPython]--

from org.cougaar.lib.aggagent.test import NumberCycle
def getCycles (x):
  return isinstance(x, NumberCycle)
def instantiate ():
  return getCycles

--------------------------------------------------------
XML Encoders:

--[SILK]--

; Number cycle value monitor
(begin
  (import "org.cougaar.lib.aggagent.query.ResultSetDataAtom")
  (lambda (nc out)
    (let ((data_atom (ResultSetDataAtom.)))
      (.addIdentifier data_atom "length" (.getLength nc))
      (.addValue      data_atom "value"  (.getValue nc))
      (.add out data_atom))))

--[JPython]--

from org.cougaar.lib.aggagent.query import ResultSetDataAtom
def encode (x, out):
  atom = ResultSetDataAtom()
  atom.addIdentifier("length", x.getLength())
  atom.addValue("value", x.getValue())
  out.add(atom)
def instantiate ():
  return encode

from java.lang import Exception
def encode (x, out):
  raise Exception("Gotcha!")
def instantiate ():
  return encode

--------------------------------------------------------
IncrementFormats:

--[SILK]--
; Cycle Count XML Increment
(begin
  (import "java.io.PrintStream")
  (import "org.cougaar.lib.aggagent.query.ResultSetDataAtom")
  (lambda (out sacc)
    (let
        ((dataAtom (ResultSetDataAtom.)))
      (.addIdentifier dataAtom "name"  "NumberOfCycles")
      (.addValue      dataAtom "value" (.size (.getMembership sacc)))
      (.setReplacement out #t)
      (.add (.getReplacementList out) dataAtom))))


--[JPython]--

from org.cougaar.lib.aggagent.query import ResultSetDataAtom
def encode (out, sacc):
  out.setReplacement(1)
  atom = ResultSetDataAtom()
  atom.addIdentifier("name", "NumberOfCycles")
  atom.addValue("value", sacc.getMembership().size())
  out.getReplacementList().add(atom)
def instantiate ():
  return encode

--------------------------------------------------------
Alerts:

--[SILK]--

;result set not empty alert
(begin
  (lambda (self)
    (let ((qra (.getQueryAdapter self)))
      (.setAlerted self (.hasNext (.getAllAtoms (.getResultSet qra)))))))

;ever changing alert
(begin
  (lambda (self)
    (.setAlerted self (not (.isAlerted self)))))

--[JPython]--

from java.lang import Integer
def handle (x):
  i = x.getQueryAdapter().getResultSet().getAllAtoms()
  while (i.hasNext()):
    y = i.next()
    if (Integer.parseInt(y.getValue("value")) % 21 == 2):
      x.setAlerted(1)
      return
  x.setAlerted(0)
def instantiate ():
  return handle

from java.lang import System
def handle (x):
  System.out.println(x.getClass())
def instantiate ():
  return handle

--------------------------------------------------------
Aggregators:

from java.lang import *
from org.cougaar.lib.aggagent.query import ResultSetDataAtom
def handle (ids, key, atoms, out):
  sum = 0
  i = atoms.iterator()
  while (i.hasNext()):
    a = i.next()
    sum = sum + Integer.parseInt(a.getValue("value"))
  meld = ResultSetDataAtom(ids, key)
  meld.addValue("total", String.valueOf(sum))
  out.add(meld)
def instantiate ():
  return handle
